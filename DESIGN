Moonshine is a series of tubes. Or functions.


===== Tags

Tags are identifiers that represent some communications channel we can listen to. They form a tree of increasingly refined channels.

root (/)
 |
 +---\ /fooirc
     |
     +----* /fooirc/#lobby
     |
     +----\ /fooirc/bd_
          |
          +----+ /fooirc/bd_/dcc
               |
               +----* /fooirc/bd_/dcc/0

Tags can be triggered. This broadcasts a message to all entities listening to this tag.

    tag = Tag:find('/fooirc/#lobby')
    tag('PART', Tag:find('/fooirc/dylan'))

Tags do not necessarily need to be created. Depending on the protocol (or rather, the parent node), they may be autovivified (users, channels, etc), or they may need explicit registration (eg, the root). Referencing a tag, even if it autovivifies, should be pure; just because you attach to /fooirc/#lobby should not send a JOIN.

Unreferencing a tag might not be idempotent (discuss?). For example, if the last
window bound to the /fooirc/#lobby tag goes away, the /fooirc protocol handler
might decide to part #lobby.

If a tag is triggered but has no listeners, the message is automatically
rebroadcast on the parent. For example, consider this scenario:

   A user has a /someirc/#lobby window open and is chatting. They then do
   /window close to close the window and part (because the tag has no
   listeners) at the same time. Meanwhile, the server sends out another chat
   line.  The chat line is redirected to the /someirc status window to ensure
   it will not be lost.

Future directions:
  * It might be interesting to associate scrollback with tags rather than
    windows. For example, one could open a new window, then attach it to
    /two/ channels. It would show the combined scrollback of both, and
    one can speak on either using ^X or /say -t
  * Listeners that do not prevent propagation to parent may be an interesting
    concept for refinement. For example, one might want to have a single
    /twitter window showing all twits. Then by binding a window to
    /twitter/dylanwh one can see dylan's twits in a seperate window.
    However one might want to leave these in the /twitter window as well.
    This may require some thought to play nice with tag-linked scrollback...

===== Logging

Some thoughts on the log format (nothing definite!)
* Option: sqlite
  Advantages: Indexes, easy to do queries etc
  Disadvantage: Relatively heavyweight (we're append-only and mostly care
    about date sorted queries)
    Needs to fsync or will get corrupted
    Not human readable
* Option: append only logs with index
  Write the log file out in date order, put an index in another file to do
  binary search on.
  Advantages: Dead simple. Doesn't need to be fsynced (we might lose some
    entries, but the start of the log ought to be fine)
    Might even be human readable depending on the format.
    Easy to split out by date range.
  Disadvantages: Need to write it from scratch. Restricting to a human readable
    format for the main log might be limiting.
  Another advantage: We can compress the log later, using zlib's Z_FULL_FLUSH
    to add restart points in the compressed stream, while still being able to
    do reverse-search on it.

